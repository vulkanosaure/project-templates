{

	// Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"For loop": {
		"prefix": "for",
		"body": [
			"for(let ${1:i}=0;$1<$2;$1++){",
			"\tlet ${3:item} = ${4:tab}[$1];",
			"\t$5",
			"}"
		],
		"description": "For loop"
	},
	
	"For in loop": {
		"prefix": "forin",
		"body": [
			"for(let ${1:k} in ${2:}){",
			"\tlet ${3:item} = $2[$1];",
			"\t$4",
			"}"
		],
		"description": "For loop"
	},
	
	"log" : {
		"prefix": "log",
		"body": [
			"console.log(${TM_SELECTED_TEXT});"
		],
		"description": "console log"
	},
	
	"foreach": {
		"prefix": "foreach",
		"body": [
			"${1:array}.forEach((${2:item}:${3:any}) => {",
				"\t$4",
				"\t",
			"}"
		],
		"description": "foreach"
	},
	
	"Set timeout": {
		"prefix": "help_settimeout",
		"body": [
			"setTimeout(() => {",
			"\t$2",
			"}, ${1:1000});"
		],
		"description": "set timeout"
	},
	
	
	"Set interval": {
		"prefix": "help_setinterval",
		"body": [
			"setInterval(function() {",
			"\t$2",
			"}.bind(this), ${1:1000});"
		],
		"description": "set interval"
	},
	
	
	"TweenMax": {
			"prefix": "help_tweenmax",
			"body": [
					"// npm i -S gsap @types/greensock",
					"// import {TweenMax} from \"gsap\";",
					"",
					"TweenMax.to(this.headerScore.nativeElement, 2, {marginTop:30, ease: Elastic.easeOut, onComplete:null, delay: 1});"
			],
			"description": "TweenMax basic usage"
	},
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	"Ng router param": {
			"prefix": "help_ng_routeparam",
			"body": [
					"this.route.snapshot.paramMap.get('$2');"
			],
			"description": "Angular : get router params"
	},
	
	"Ng inject window": {
			"prefix": "help_ng_inject_window",
			"body": [
					"//in constructor params",
					"@Inject(WINDOW) private window: Window,"
			],
			"description": "Angular : how to access window object"
	},
	
	"Ng router events": {
			"prefix": "help_ng_router_events",
			"body": [
					"// private router:Router,",
					"// private urlParser:UrlParserService,",
					"router.events.subscribe((event) => {",
					"",
					"\tif (event instanceof NavigationEnd) {",
					"\t\t",
					"\t\tlet url:string = event.url;",
					"\t\tlet idmodal:string = this.urlParser.getRoute(url, 'modal');",
					"\t\t$1",
					"\t\t",
					"\t}",
					"});"
			],
			"description": "Angular : subscribe to router events"
	},
	
	"Ng ViewChild": {
			"prefix": "help_ng_viewchild",
			"body": [
					"@ViewChild('$1') ${1}:${2:ElementRef};"
			],
			"description": "Angular : ViewChild reference"
	}
	
	
	
}