{
/*
	// Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/

	"For Loop": {
        "prefix": "for",
        "body": [
            "for (var ${1:i} = 0; ${1:i} < ${2:tab}.length; ${1:i}++) {",
            "\tvar ${3:item} = ${2:tab}[${1:i}];",
            "\t$0",
            "}"
        ],
        "description": "For Loop"
	},
	"For lengh": {
        "prefix": "forl",
        "body": [
            "for (var ${1:i} = 0; ${1:i} < ${2:len}; ${1:i}++) {",
            "\tvar ${3:item} = ${2:tab}[${1:i}];",
            "\t$0",
            "}"
        ],
        "description": "For length"
	},
	"For in": {
        "prefix": "forin",
        "body": [
            "for (var ${1:i} in ${2:tab}) {",
            "\tvar ${3:item} = ${2:tab}[${1:i}];",
            "\t$0",
            "}"
        ],
        "description": "For in"
	},


	"public method": {
        "prefix": "pub",
        "body": [
			"public ${2:name} ()",
			"{",
            "\tconsole.log('${2:name}()');",
            "\t$0",
            "}"
        ],
        "description": "public method"
	},

	"private method": {
        "prefix": "pri",
        "body": [
			"private ${2:name} ()",
			"{",
            "\tconsole.log('${2:name}()');",
            "\t$0",
            "}"
        ],
        "description": "private method"
    },
    

    "log var": {
        "prefix": "logvar",
        "body": [
            "console.log(${1} + \" <= ${1}\");",
            "$0"
        ],
        "description": "log variable"
	},

	
	"separation": {
			"prefix": "sep",
			"body": [
							"\n//__________________________________________________________",
							"//$0\n\n"
			],
			"description": "add separation"
	}

	
}